{"version":3,"sources":["components/Cards/Cards.js","components/Footer/Footer.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["CardClick","props","react_default","a","createElement","className","onClick","reArrangeCards","characterClicked","id","handleClick","alt","name","src","image","Footer","text","Navbar","class","href","style","paddingRight","score","paddingLeft","topScore","App","state","cards","cardsClicked","footerText","_document$getElements","document","getElementsByTagName","pageBody","Object","slicedToArray","_this","includes","setState","classList","add","setTimeout","remove","concat","toConsumableArray","array","currentIndex","length","randomIndex","Math","floor","random","temporaryValue","showCards","map","card","key","Cards_Cards","components_Navbar_Navbar","this","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6df76187.chunk.js","sourcesContent":["import React from 'react';\nimport './Cards.css';\n\nfunction handleClick(props) {\n\tprops.reArrangeCards();\n\tprops.characterClicked(props.id);\n}\n\n\nfunction CardClick(props) {\n\treturn (\n\t\t<div className=\"card img-container\" onClick={() => handleClick(props)}>\n\t\t\t<img alt={props.name} src={props.image} />\n\t\t</div>\n\t)\n}\n\n\n\n\nexport default CardClick","import React from 'react';\nimport \"./Footer.css\";\n\n\nfunction Footer(props) {\n  return (\n    <footer id=\"footerPage\" className=\"page-footer\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <h5 className=\"center white-text footer-update\">{props.text}</h5>\n        </div>\n      </div>\n      <div className=\"footer-copyright\">\n        <div className=\"container center\">\n          Â© 2019\n        </div>\n      </div>\n    </footer>\n  )\n}\n\n\n\n\nexport default Footer;","import React from \"react\";\nimport \"./Navbar.css\";\n\nfunction Navbar(props) {\n\treturn (\n\t\t<div className=\"navbar-fixed\">\n\t\t\t<nav class=\"navBar\">\n\t\t\t\t<div className=\"nav-wrapper container\">\n\t\t\t\t\t<a href=\"/\" id='navTitle' className='brand-logo center'>Luxury Car Memory Game</a>\n\t\t\t\t\t<ul className='right'>\n\t\t\t\t\t\t<li style={{ paddingRight: \"20px\" }}>Score: {props.score}</li>\n\t\t\t\t\t\t<li style={{ paddingLeft: \"20px\" }}>Top Score: {props.topScore}</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</nav>\n\t\t</div>\n\t)\n}\n\n\n\nexport default Navbar;","import React, { Component } from 'react';\nimport ClickCard from './components/Cards/Cards.js';\nimport Footer from './components/Footer/Footer.js';\nimport Navbar from './components/Navbar/Navbar.js';\nimport cards from './cards.json';\n\nimport './index.css';\n\n\nclass App extends Component {\n  state = {\n      cards: cards,\n      score: 0,\n      topScore: 0,\n      cardsClicked: [],\n      footerText: \"\"\n    }\n\n    characterClicked = (id) => {\n    const [pageBody] = document.getElementsByTagName('body');\n\n    if (this.state.cardsClicked.includes(id)) {\n      this.setState({score: 0, cardsClicked: []})\n\n      pageBody.classList.add('shakeWrapper')\n      this.setState({footerText: 'Already selected! Try Again!'})\n      setTimeout(() => {\n        pageBody.classList.remove('shakeWrapper');\n      }, 500);\n      setTimeout(() => {\n        this.setState({footerText: \"\"})\n      }, 1800)\n\n    } else {\n      this.setState({cardsClicked: [...this.state.cardsClicked, id]})\n      this.setState({score: this.state.score + 1})\n      if (this.state.score >= this.state.topScore) {\n        this.setState({topScore: this.state.score + 1})\n\n      } \n      if (this.state.score === 11) {\n        this.setState({footerText: 'You Won! Play again?'})\n        this.setState({score: 0, cardsClicked: [], cards: cards})\n        setTimeout(() => {\n          this.setState({footerText: ''})\n        }, 1800)\n      } \n    }\n  }\n\n  reArrangeCards = (array) => {\n    let currentIndex = array.length;\n\n    while (0 !== currentIndex) {\n      let randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      let temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    this.setState({cards:cards});\n  }\n\n  showCards = (array) => {\n    return this.state.cards.map(card => (\n      <section className='col s3 m3 l3' key={card.id} id={card.id}>\n        <ClickCard\n          name={card.name} \n          image={card.image} \n          reArrangeCards={() => {this.reArrangeCards(this.state.cards)}}\n          characterClicked={() => {this.characterClicked(card.id)}}/>\n      </section>\n      )\n    )\n  }\n\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <Navbar score={this.state.score} topScore={this.state.topScore}/>\n        <br />\n        <div className=\"container row cardWrapper\">\n          {this.showCards(this.state.cards)}\n        </div>\n        <Footer text={this.state.footerText}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}